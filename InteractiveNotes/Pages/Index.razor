@page "/"
@using InteractiveNotes.Data;
@inject NoteService NoteService
<CreateNoteModal @ref="createNoteModal" />

<div class="top-panel">
    <button @onclick="() => createNoteModal.ShowModal()">New note</button>
    <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Search notes..." />
    <span>Total notes: @notes.Count()</span>
</div>

@foreach (var note in notes.Where(n => n.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || n.Content.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
{
    <Note NoteId="note.NoteId" />
}

@code {
    private List<NoteDto> notes = new List<NoteDto>();
    private string searchTerm = string.Empty;
    private CreateNoteModal createNoteModal;

    protected override async Task OnInitializedAsync()
    {
        await RefreshNotes();
        await base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            createNoteModal.OnNoteAdded += OnNoteAddedHandler;
        }
    }

    private void OnNoteAddedHandler()
    {
        _ = RefreshNotes();
    }

    private async Task RefreshNotes()
    {
        notes = (await NoteService.GetAllNotesAsync()).ToList();
        StateHasChanged();
    }
}