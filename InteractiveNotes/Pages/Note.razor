@page "/note/{NoteId:int}"
@inject NoteService NoteService
@inject NavigationManager NavigationManager

@using InteractiveNotes.Data
@using Microsoft.AspNetCore.Components

@code {
    [Parameter] public int NoteId { get; set; }
    private NoteDto NoteData { get; set; }

    private string viewButtonLabel = "View note";
    private string editButtonLabel = "Edit note";
    private string originalContent;
    private string originalTitle;

    private bool IsExpanded { get; set; } = false;
    private bool IsEditing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        NoteData = await NoteService.GetNoteByIdAsync(NoteId);
    }

    private void ToggleExpand()
    {
        if (IsEditing && IsExpanded)
        {
            NoteData.Content = originalContent;
            NoteData.Title = originalTitle;
            IsEditing = false;
            editButtonLabel = "Edit note";
        }
        IsExpanded = !IsExpanded;
        viewButtonLabel = IsExpanded ? "Hide note" : "View note";
    }

    private async void DeleteNote()
    {
        await NoteService.DeleteNoteAsync(NoteId);
        NavigationManager.NavigateTo("/", true);
    }

    private void EditNote()
    {
        if (!IsExpanded)
        {
            IsExpanded = true; 
        }

        if (IsEditing)
        {
            IsEditing = false;
            editButtonLabel = "Edit note";
            NoteData.Content = originalContent;
            NoteData.Title = originalTitle;
        }
        else
        {
            IsEditing = true;
            editButtonLabel = "Stop editing";
            originalContent = NoteData.Content;
            originalTitle = NoteData.Title;
        }
    }

    private async void SaveNote()
    {
        await NoteService.UpdateNoteAsync(NoteData);
        IsEditing = false;
        editButtonLabel = "Edit note";
    }

    private int DaysSinceLastModified => (DateTime.Now - NoteData.CreatingDate).Days;
}


<div class="note">
    <div class="header">
        @if (IsEditing)
        {
            <input @bind="NoteData.Title" class="title-edit" />
        }
        else
        {
            <span class="title">@NoteData.Title</span>
        }
        <span class="date">@DaysSinceLastModified days ago</span>
        <div class="actions">
            <button @onclick="() => ToggleExpand()">@viewButtonLabel</button>
            <button @onclick="() => EditNote()">@editButtonLabel</button>
        </div>
    </div>
    @if (IsExpanded)
    {
        @if (IsEditing)
        {
            <textarea @bind="NoteData.Content" class="editing-area"></textarea>
            <div class="right-actions">
                <button @onclick="() => SaveNote()">Save</button>
                <button @onclick="() => DeleteNote()">Delete</button>
            </div>
        }
        else
        {
            <div class="content">
                @NoteData.Content
            </div>
            <div class="right-actions">
                <button @onclick="() => DeleteNote()">Delete</button>
            </div>
        }
    }
</div>
